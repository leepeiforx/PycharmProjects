'''按文件的组织形式可以把文件分为文本文件和二进制文件
1.文本文件
    存储的是常规字符串,由若干文本行组成,通常每行以换行符\n结尾,常用拓展名为txt,log,ini的文件哦独属于文本文件
2.二进制文件
    常见的如图形图像文件,音视频文件,可执行文件,资源文件爱你,各种数据库文件,各类office文档
'''

#%%
# 文件操作的基本知识
'''内置函数open()
open(file,mode='r',buffering=-1,encoding=None,errors=None,newline=None,closefd=True,opener=None)

    file:指定要打开或创建的文件名称,如果该文件不在当前目录中,可以使用相对路径或绝对路径,为了减少路径中分隔符\符号的输入,可以使用
    原始字符串
    mode: 指定打开文件后的处理方式
    buffering: 指定读写文件的缓存模式,数值0(只在二进制模式中可以使用)表示不缓存,数值1(只在文本模式下可用)表示使用行缓存模式
    大于1的数字则表示缓存区的大小,默认值是-1.
    encoding: 指定对文本进行编码和解码的方式,只适用于文本模式   
    newline: 只适用于文本模式,取值可以是None,"\n","\r","\r\n"中的任何一个,表示文件中换行符的形式
    
    当对文件操作完以后,一定要关闭文件对象,这样才能保证所做的任何修改都被保存在文件中
    file.close()

'''

"""
文件打开模式
    r   读模式(默认模式,可省略),如果文件不存在则抛出异常
    w   写模式,如果文件已存在,先清空原有的内容
    x   写模式,创建新文件,如果文件已存在则抛出异常
    a   追加模式,不覆盖原有文件的内容
    b   二进制模式(可与其他模式组合使用),使用二进制模式打开文件时不允许指定encoding参数
    t   文本模式(默认模式,可省略)
    +   读,写模式(可与其他模式组合使用)
"""

# 文件对象属性与常用方法
'''
文件对象常用属性
    buffer  返回当前文件的缓冲区对象
    closed  判断文件是否关闭,若文件已关闭则返回True
    fileno  文件号,一般不需要关心
    mode    返回文件的打开模式
    name    返回文件的名称
'''
'''
文件对象常用方法
    close()         把缓冲区的内容写入文件,同时关闭文件,并释放文件对象
    detach()        分离并返回底层的缓冲,一旦底层缓冲被分离,文件对象不再可用,不允许做任何操作
    flush()         把缓冲区内容写入文件,但不关闭文件
    read([size])    从文本文件爱你读取size个字节的内容作为结果返回,或从二进制文件中读取指定数量的字节并返回,如果省略
                    size则表示读取所有内容
    readable()      测试文件是否可读 
    readline()      从文本文件中读取一行内容作为结果返回
    readlines()     把文本文件的每行文本作为一个字符串存入列表,返回该列表,对于大文件会占用较多的内存,不建议使用
    seek(offset[,whence])   把文件指针移动到新位置,offset表示相对于whence的文职,whence为0表示从文件头开始计算
                            1表示从当前位置开始计算,2表示从文件尾开始计算,默认为0
    seekable()      测试当前文件是否支持随机访问,如果文件不支持随机访问,则调用方法seek(),tell()和truncate()时会抛出异常
    tell()          返回文件指针的当前位置
    truncate([size])        删除从当前指针位置到文件末尾的内容,如果指定了size,则不论指针在什么位置都只留下前size个字节,其余的
                            一律删除
    write(s)                把字符串s的内容写入文件
    writeable()             测试当前文件是否可写
    writelines(s)           把字符串列表写入文本文件,不添加换行符
'''

'''
    另外,python标准库codecs中的open()函数也提供打开文件的功能,返回一个StreamReaderWriter对象,同样支持文件的读写操作
其中的参数与内置函数open()类似,区别在于如果指定了encoding参数的话就会强制使用二进制模式
'''
# import codecs
# codecs.open(filename,mode='r',encoding=None,errors='strict',buffering=1)

# 上下文管理语句with
'''
    读写文件优先考虑所使用上下文管理语句with,关键字with可以自动管理资源,无论什么原因(哪怕是因为代码引发了异常)跳出with块,
总能保证文件被正确关闭
'''
    # with open(filename,mode,encoding) as fp:
        # 这里写通过文件对象fp读写文件内容的语句
